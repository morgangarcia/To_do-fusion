'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-env node */


var _storageSingleton = require('./storage-singleton');

var _storageSingleton2 = _interopRequireDefault(_storageSingleton);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AssetsManifestPlugin = function () {
  function AssetsManifestPlugin() {
    _classCallCheck(this, AssetsManifestPlugin);
  }

  _createClass(AssetsManifestPlugin, [{
    key: 'apply',

    // eslint-disable-next-line class-methods-use-this
    value: function apply(compiler) {
      var onCompilation = function onCompilation(compilation) {
        var additionalAssetsHook = function additionalAssetsHook(cb) {
          var storage = _storageSingleton2.default.getStorage();
          storage.emittedFiles.forEach(function (item) {
            // eslint-disable-next-line no-param-reassign
            compilation.assets[item.outputPath] = {
              source: function source() {
                return item.content;
              },
              size: function size() {
                return Buffer.byteLength(item.content, 'utf8');
              }
            };
          });
          cb();
        };

        if (compilation.hooks) {
          compilation.hooks.additionalAssets.tapAsync('AssetsManifestPlugin', additionalAssetsHook);
        } else {
          compilation.plugin('additional-assets', additionalAssetsHook);
        }
      };

      var onEmit = function onEmit(compilation, cb) {
        cb();
      };

      if (compiler.hooks) {
        compiler.hooks.emit.tapAsync('AssetsManifestPlugin', onEmit);
        compiler.hooks.compilation.tap('AssetsManifestPlugin', onCompilation);
      } else {
        compiler.plugin('compilation', onCompilation);
        compiler.plugin('emit', onEmit);
      }
    }
  }]);

  return AssetsManifestPlugin;
}();

exports.default = AssetsManifestPlugin;