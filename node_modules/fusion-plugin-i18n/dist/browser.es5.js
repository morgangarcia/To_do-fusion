'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fusionCore = require('fusion-core');
var fusionTokens = require('fusion-tokens');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var loader = null;

var _templateObject = /*#__PURE__*/ _taggedTemplateLiteralLoose(["<script type='application/json' id=\"__TRANSLATIONS__\">", "</script>"], ["<script type='application/json' id=\"__TRANSLATIONS__\">", "</script>"]);

function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env node */
var I18nLoaderToken = fusionCore.createToken('I18nLoaderToken');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
function loadTranslations() {
  var element = document.getElementById('__TRANSLATIONS__');

  if (!element) {
    throw new Error('[fusion-plugin-i18n] - Could not find a __TRANSLATIONS__ element');
  }

  try {
    return JSON.parse(fusionCore.unescape(element.textContent));
  } catch (e) {
    throw new Error('[fusion-plugin-i18n] - Error parsing __TRANSLATIONS__ element content');
  }
}

var HydrationStateToken = fusionCore.createToken('HydrationStateToken');
var plugin$2 = true && fusionCore.createPlugin({
  deps: {
    fetch: fusionTokens.FetchToken.optional,
    hydrationState: HydrationStateToken.optional
  },
  provides: function provides(_temp) {
    var _ref = _temp === void 0 ? {} : _temp,
        _ref$fetch = _ref.fetch,
        fetch = _ref$fetch === void 0 ? window.fetch : _ref$fetch,
        hydrationState = _ref.hydrationState;

    var I18n =
    /*#__PURE__*/
    function () {
      function I18n() {
        var _ref2 = hydrationState || loadTranslations(),
            chunks = _ref2.chunks,
            translations = _ref2.translations;

        this.loadedChunks = chunks || [];
        this.translationMap = translations || {};
      }

      var _proto = I18n.prototype;

      _proto.load = function load(chunkIds) {
        var _this = this;

        var unloaded = chunkIds.filter(function (id) {
          return _this.loadedChunks.indexOf(id) < 0;
        });

        if (unloaded.length > 0) {
          var ids = unloaded.join(','); // TODO(#3) don't append prefix if injected fetch also injects prefix

          return fetch("/_translations?ids=" + ids, {
            method: 'POST'
          }).then(function (r) {
            return r.json();
          }).then(function (data) {
            for (var key in data) {
              _this.translationMap[key] = data[key];
            }

            unloaded.forEach(function (id) {
              _this.loadedChunks[id] = true;
            });
          });
        }
      };

      _proto.translate = function translate(key, interpolations) {
        if (interpolations === void 0) {
          interpolations = {};
        }

        var template = this.translationMap[key];
        return template ? template.replace(/\${(.*?)}/g, function (_, k) {
          return interpolations[k];
        }) : key;
      };

      return I18n;
    }();

    var i18n = new I18n();
    return {
      from: function from() {
        return i18n;
      }
    };
  }
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var I18nToken = fusionCore.createToken('I18nToken');
var plugin$3 = plugin$2;

exports.default = plugin$3;
exports.I18nToken = I18nToken;
exports.I18nLoaderToken = I18nLoaderToken;
exports.HydrationStateToken = HydrationStateToken;
exports.createI18nLoader = loader;
//# sourceMappingURL=browser.es5.js.map
