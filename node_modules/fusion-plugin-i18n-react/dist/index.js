'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var PropTypes = _interopDefault(require('prop-types'));
var i18n = require('fusion-plugin-i18n');
var i18n__default = _interopDefault(i18n);
var fusionReact = require('fusion-react');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
class BundleSplitConsumer extends React.Component {
  constructor(props, context) {
    super(props, context); // splitComponentLoaders comes from fusion-react-async/prepare-provider
    // ids comes from fusion-react-async/split
    // props.provides comes from fusion-react/plugin and references i18n()

    this.i18n = props.provides.from(props.ctx);

    if (context.splitComponentLoaders) {
      context.splitComponentLoaders.push(ids => this.i18n.load(ids));
    }
  }

  getChildContext() {
    return {
      i18n: this.i18n
    };
  }

  render() {
    return React.Children.only(this.props.children);
  }

}

BundleSplitConsumer.contextTypes = {
  splitComponentLoaders: PropTypes.array
};
BundleSplitConsumer.childContextTypes = {
  i18n: PropTypes.object.isRequired
};
var I18n = fusionReact.ProviderPlugin.create('i18n', i18n__default, BundleSplitConsumer);

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
/*
The `withTranslations` HOC takes an array of translation keys as an argument,
but does not use it at runtime.

However, these keys are captured by `babel-plugin-i18n` at compile-time by
Fusion's compiler and the compiler uses generate a map of all translations
in the app.

The translation map is then exposed by `fusion-plugin-i18n/chunk-translation-map.js`
*/

const withTranslations = () =>
/*translationKeys*/
{
  return OriginalComponent => {
    class WithTranslations extends React.Component {
      constructor(props, context) {
        super(props, context);
        const {
          i18n: i18n$$1
        } = context;
        this.translateProp = i18n$$1 ? (key, data) => i18n$$1.translate(key, data) : key => key;
      }

      render() {
        const finalProps = Object.assign({
          translate: this.translateProp
        }, this.props);
        return React__default.createElement(OriginalComponent, finalProps);
      }

    }

    WithTranslations.contextTypes = OriginalComponent.contextTypes = {
      i18n: PropTypes.object
    };
    WithTranslations.displayName = `withTranslations(${OriginalComponent.displayName || OriginalComponent.name})`;
    return WithTranslations;
  };
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
function Translate(props, context) {
  return React__default.createElement("span", null, context.i18n && context.i18n.translate(props.id, props.data) || props.id);
}

Translate.contextTypes = {
  i18n: PropTypes.object
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const withTranslationsTyped = withTranslations;

exports.I18nToken = i18n.I18nToken;
exports.I18nLoaderToken = i18n.I18nLoaderToken;
exports.HydrationStateToken = i18n.HydrationStateToken;
exports.createI18nLoader = i18n.createI18nLoader;
exports.default = I18n;
exports.withTranslations = withTranslationsTyped;
exports.Translate = Translate;
//# sourceMappingURL=index.js.map
