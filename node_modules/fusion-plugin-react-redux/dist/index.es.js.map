{"version":3,"file":"index.es.js","sources":["../src/ctx-enhancer.js","../src/tokens.js","../src/browser.js","../src/server.js","../src/index.js"],"sourcesContent":["/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\n\nimport {createStore} from 'redux';\nimport type {Store} from 'redux';\n\nimport type {Context} from 'fusion-core';\n\ntype CreateStoreType = typeof createStore;\ntype StoreWithContextType = Store<*, *, *> & {ctx: Context};\n\nexport default (ctx?: Context) => (createStore: CreateStoreType) => (\n  ...args: any\n) => {\n  const store: StoreWithContextType = {\n    ...createStore(...args),\n    ctx: ctx,\n  };\n  return store;\n};\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport type {Reducer, StoreEnhancer} from 'redux';\n\nimport {createToken} from 'fusion-core';\nimport type {Token, Context} from 'fusion-core';\n\nimport type {ReactReduxServiceType} from './types.js';\n\ntype InitialStateType<TState> = (ctx?: Context) => Promise<TState> | TState;\n\nexport const ReduxToken: Token<ReactReduxServiceType> = createToken(\n  'ReduxToken'\n);\nexport const ReducerToken: Token<Reducer<*, *>> = createToken('ReducerToken');\nexport const PreloadedStateToken: Token<Object> = createToken(\n  'PreloadedStateToken'\n);\nexport const EnhancerToken: Token<StoreEnhancer<*, *, *>> = createToken(\n  'EnhancerToken'\n);\nexport const GetInitialStateToken: Token<\n  InitialStateType<Object>\n> = createToken('GetInitialStateToken');\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\n/* eslint-env browser */\n/* globals __REDUX_DEVTOOLS_EXTENSION__ */\n\nimport React from 'react';\nimport {Provider} from 'react-redux';\nimport {compose, createStore} from 'redux';\n\nimport {createPlugin, unescape} from 'fusion-core';\nimport type {Context, FusionPlugin} from 'fusion-core';\n\nimport ctxEnhancer from './ctx-enhancer';\nimport {ReducerToken, PreloadedStateToken, EnhancerToken} from './tokens.js';\nimport type {\n  StoreWithContextType,\n  ReactReduxDepsType,\n  ReactReduxServiceType,\n} from './types.js';\n\nconst getPlugin = () => {\n  let storeCache = null;\n  return createPlugin({\n    deps: {\n      reducer: ReducerToken,\n      preloadedState: PreloadedStateToken.optional,\n      enhancer: EnhancerToken.optional,\n    },\n    provides({reducer, preloadedState, enhancer}) {\n      class Redux {\n        store: StoreWithContextType<*, *, *>;\n\n        constructor(ctx) {\n          if (storeCache) {\n            // $FlowFixMe\n            this.store = storeCache;\n          } else {\n            // We only use initialState for client-side hydration\n            // The real initial state should be derived from the reducer and the @@INIT action\n            if (!preloadedState) {\n              const stateElement = document.getElementById('__REDUX_STATE__');\n              if (stateElement) {\n                preloadedState = JSON.parse(unescape(stateElement.textContent));\n              }\n            }\n            const devTool =\n              __DEV__ &&\n              window.__REDUX_DEVTOOLS_EXTENSION__ &&\n              // $FlowFixMe\n              __REDUX_DEVTOOLS_EXTENSION__();\n            const enhancers = [enhancer, ctxEnhancer(ctx), devTool].filter(\n              Boolean\n            );\n            // $FlowFixMe\n            this.store = createStore(\n              reducer,\n              preloadedState,\n              // $FlowFixMe\n              compose(...enhancers)\n            );\n            storeCache = this.store;\n          }\n        }\n      }\n      return {\n        from: (ctx?: Context) => {\n          return new Redux(ctx);\n        },\n      };\n    },\n    middleware(_, redux) {\n      return (ctx, next) => {\n        const {store} = redux.from(ctx);\n        ctx.element = <Provider store={store}>{ctx.element}</Provider>;\n        return next();\n      };\n    },\n  });\n};\n\nexport default ((getPlugin: any): () => FusionPlugin<\n  ReactReduxDepsType,\n  ReactReduxServiceType\n>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport React from 'react';\nimport {compose, createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport {createPlugin, memoize, html} from 'fusion-core';\nimport type {FusionPlugin, Context} from 'fusion-core';\n\nimport ctxEnhancer from './ctx-enhancer';\nimport {\n  ReducerToken,\n  PreloadedStateToken,\n  EnhancerToken,\n  GetInitialStateToken,\n} from './tokens.js';\nimport type {\n  StoreWithContextType,\n  ReactReduxDepsType,\n  ReactReduxServiceType,\n} from './types.js';\n\nconst plugin =\n  __NODE__ &&\n  createPlugin({\n    deps: {\n      reducer: ReducerToken,\n      preloadedState: PreloadedStateToken.optional,\n      enhancer: EnhancerToken.optional,\n      getInitialState: GetInitialStateToken.optional,\n    },\n    provides({reducer, preloadedState, enhancer, getInitialState}) {\n      class Redux {\n        ctx: Context;\n        store: ?StoreWithContextType<*, *, *>;\n\n        constructor(ctx) {\n          // We only use initialState for client-side hydration\n          // The real initial state should be derived from the reducer and the @@INIT action\n          this.ctx = ctx;\n          this.store = null;\n        }\n        async initStore() {\n          if (this.store) {\n            return this.store;\n          }\n          if (getInitialState) {\n            preloadedState = Object.assign(\n              {},\n              preloadedState,\n              await getInitialState(this.ctx)\n            );\n          }\n          const enhancers = [enhancer, ctxEnhancer(this.ctx)].filter(Boolean);\n          // $FlowFixMe\n          this.store = createStore(\n            reducer,\n            preloadedState,\n            // $FlowFixMe\n            compose(...enhancers)\n          );\n          return this.store;\n        }\n      }\n      return {\n        from: memoize(ctx => new Redux(ctx)),\n      };\n    },\n    middleware(_, redux) {\n      return async (ctx, next) => {\n        if (!ctx.element) return next();\n        const store = await redux.from(ctx).initStore();\n        ctx.element = <Provider store={store}>{ctx.element}</Provider>;\n        await next();\n\n        const serialized = JSON.stringify(store.getState());\n        const script = html`<script type=\"application/json\" id=\"__REDUX_STATE__\">${serialized}</script>`;\n        ctx.template.body.push(script);\n      };\n    },\n  });\n\nexport default ((plugin: any): FusionPlugin<\n  ReactReduxDepsType,\n  ReactReduxServiceType\n>);\n","/** Copyright (c) 2018 Uber Technologies, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport browserPlugin from './browser';\nimport serverPlugin from './server';\n\nexport default (__NODE__ ? serverPlugin : browserPlugin());\n\nexport {\n  ReduxToken,\n  ReducerToken,\n  PreloadedStateToken,\n  EnhancerToken,\n  GetInitialStateToken,\n} from './tokens';\n"],"names":["ctx","createStore","args","store","ReduxToken","createToken","ReducerToken","PreloadedStateToken","EnhancerToken","GetInitialStateToken","plugin","createPlugin","optional","Redux","initStore","getInitialState","Object","assign","preloadedState","enhancers","enhancer","ctxEnhancer","filter","Boolean","reducer","memoize","_","redux","next","element","from","serialized","JSON","stringify","getState","script","html","template","body","push","serverPlugin"],"mappings":";;;;;;;;;;;;;;;;;;AAUA,AAQA,mBAAgBA,GAAD,IAAoBC,cAAD,IAAkC,CAClE,GAAGC,IAD+D,KAE/D;QACGC,0BACDF,eAAY,GAAGC,IAAf,CADC;SAECF;IAFP;;SAIOG,KAAP;CAPF;;AClBA;;;;;;;AAUA,AAOO,MAAMC,aAA2CC,YACtD,YADsD,CAAjD;AAGP,AAAO,MAAMC,eAAqCD,YAAY,cAAZ,CAA3C;AACP,AAAO,MAAME,sBAAqCF,YAChD,qBADgD,CAA3C;AAGP,AAAO,MAAMG,gBAA+CH,YAC1D,eAD0D,CAArD;AAGP,AAAO,MAAMI,uBAETJ,YAAY,sBAAZ,CAFG;;AC3BP;;;;;;;;;;;;ACAA;;;;;;;AAQA,AAoBA,MAAMK,SACJ,QACAC,aAAa;QACL;aACKL,YADL;oBAEYC,oBAAoBK,QAFhC;cAGMJ,cAAcI,QAHpB;qBAIaH,qBAAqBG;GAL7B;;WAOF;WAAA;kBAAA;YAAA;;GAAT,EAA+D;UACvDC,KAAN,CAAY;kBAIEb,GAAZ,EAAiB;;;aAGVA,GAAL,GAAWA,GAAX;aACKG,KAAL,GAAa,IAAb;;;YAEIW,SAAN,GAAkB;YACZ,KAAKX,KAAT,EAAgB;iBACP,KAAKA,KAAZ;;;YAEEY,eAAJ,EAAqB;2BACFC,OAAOC,MAAP,CACf,EADe,EAEfC,cAFe,GAGf,MAAMH,gBAAgB,KAAKf,GAArB,CAHS,EAAjB;;;cAMImB,YAAY,CAACC,QAAD,EAAWC,YAAY,KAAKrB,GAAjB,CAAX,EAAkCsB,MAAlC,CAAyCC,OAAzC,CAAlB,CAXgB;;aAaXpB,KAAL,GAAaF,YACXuB,OADW,EAEXN,cAFW;gBAIH,GAAGC,SAAX,CAJW,CAAb;eAMO,KAAKhB,KAAZ;;;;;WAGG;YACCsB,QAAQzB,OAAO,IAAIa,KAAJ,CAAUb,GAAV,CAAf;KADR;GAxCS;;aA4CA0B,CAAX,EAAcC,KAAd,EAAqB;WACZ,OAAO3B,GAAP,EAAY4B,IAAZ,KAAqB;UACtB,CAAC5B,IAAI6B,OAAT,EAAkB,OAAOD,MAAP;YACZzB,QAAQ,MAAMwB,MAAMG,IAAN,CAAW9B,GAAX,EAAgBc,SAAhB,EAApB;UACIe,OAAJ,GAAc,oBAAC,QAAD;eAAiB1B;SAAQH,IAAI6B,OAA7B,CAAd;YACMD,MAAN;YAEMG,aAAaC,KAAKC,SAAL,CAAe9B,MAAM+B,QAAN,EAAf,CAAnB;YACMC,SAASC,IAAK,wDAAuDL,UAAW,WAAtF;UACIM,QAAJ,CAAaC,IAAb,CAAkBC,IAAlB,CAAuBJ,MAAvB;KARF;;;CA7CJ,CAFF;;AC5BA;;;;;;;AAQA,AAGA,YAA2BK,MAA3B;;;;;"}