import { createStore, compose } from 'redux';
import { createToken, createPlugin, unescape } from 'fusion-core';
import React from 'react';
import { Provider } from 'react-redux';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var ctxEnhancer = (ctx => createStore$$1 => (...args) => {
  const store = _objectSpread({}, createStore$$1(...args), {
    ctx: ctx
  });

  return store;
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const ReduxToken = createToken('ReduxToken');
const ReducerToken = createToken('ReducerToken');
const PreloadedStateToken = createToken('PreloadedStateToken');
const EnhancerToken = createToken('EnhancerToken');
const GetInitialStateToken = createToken('GetInitialStateToken');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* globals __REDUX_DEVTOOLS_EXTENSION__ */
const getPlugin = () => {
  let storeCache = null;
  return createPlugin({
    deps: {
      reducer: ReducerToken,
      preloadedState: PreloadedStateToken.optional,
      enhancer: EnhancerToken.optional
    },

    provides({
      reducer,
      preloadedState,
      enhancer
    }) {
      class Redux {
        constructor(ctx) {
          if (storeCache) {
            // $FlowFixMe
            this.store = storeCache;
          } else {
            // We only use initialState for client-side hydration
            // The real initial state should be derived from the reducer and the @@INIT action
            if (!preloadedState) {
              const stateElement = document.getElementById('__REDUX_STATE__');

              if (stateElement) {
                preloadedState = JSON.parse(unescape(stateElement.textContent));
              }
            }

            const devTool = process.env.NODE_ENV !== "production" && window.__REDUX_DEVTOOLS_EXTENSION__ && // $FlowFixMe
            __REDUX_DEVTOOLS_EXTENSION__();

            const enhancers = [enhancer, ctxEnhancer(ctx), devTool].filter(Boolean); // $FlowFixMe

            this.store = createStore(reducer, preloadedState, // $FlowFixMe
            compose(...enhancers));
            storeCache = this.store;
          }
        }

      }

      return {
        from: ctx => {
          return new Redux(ctx);
        }
      };
    },

    middleware(_, redux) {
      return (ctx, next) => {
        const {
          store
        } = redux.from(ctx);
        ctx.element = React.createElement(Provider, {
          store: store
        }, ctx.element);
        return next();
      };
    }

  });
};

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var index = getPlugin();

export default index;
export { ReduxToken, ReducerToken, PreloadedStateToken, EnhancerToken, GetInitialStateToken };
//# sourceMappingURL=browser.es2017.es.js.map
