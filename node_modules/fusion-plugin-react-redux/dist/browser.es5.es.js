import { createStore, compose } from 'redux';
import { createToken, createPlugin, unescape } from 'fusion-core';
import React from 'react';
import { Provider } from 'react-redux';

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var ctxEnhancer = (function (ctx) {
  return function (createStore$$1) {
    return function () {
      var store = _objectSpread({}, createStore$$1.apply(void 0, arguments), {
        ctx: ctx
      });

      return store;
    };
  };
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var ReduxToken = createToken('ReduxToken');
var ReducerToken = createToken('ReducerToken');
var PreloadedStateToken = createToken('PreloadedStateToken');
var EnhancerToken = createToken('EnhancerToken');
var GetInitialStateToken = createToken('GetInitialStateToken');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* globals __REDUX_DEVTOOLS_EXTENSION__ */
var getPlugin = function getPlugin() {
  var storeCache = null;
  return createPlugin({
    deps: {
      reducer: ReducerToken,
      preloadedState: PreloadedStateToken.optional,
      enhancer: EnhancerToken.optional
    },
    provides: function provides(_ref) {
      var reducer = _ref.reducer,
          preloadedState = _ref.preloadedState,
          enhancer = _ref.enhancer;

      var Redux = function Redux(ctx) {
        if (storeCache) {
          // $FlowFixMe
          this.store = storeCache;
        } else {
          // We only use initialState for client-side hydration
          // The real initial state should be derived from the reducer and the @@INIT action
          if (!preloadedState) {
            var stateElement = document.getElementById('__REDUX_STATE__');

            if (stateElement) {
              preloadedState = JSON.parse(unescape(stateElement.textContent));
            }
          }

          var devTool = process.env.NODE_ENV !== "production" && window.__REDUX_DEVTOOLS_EXTENSION__ && // $FlowFixMe
          __REDUX_DEVTOOLS_EXTENSION__();

          var enhancers = [enhancer, ctxEnhancer(ctx), devTool].filter(Boolean); // $FlowFixMe

          this.store = createStore(reducer, preloadedState, // $FlowFixMe
          compose.apply(void 0, enhancers));
          storeCache = this.store;
        }
      };

      return {
        from: function from(ctx) {
          return new Redux(ctx);
        }
      };
    },
    middleware: function middleware(_, redux) {
      return function (ctx, next) {
        var _redux$from = redux.from(ctx),
            store = _redux$from.store;

        ctx.element = React.createElement(Provider, {
          store: store
        }, ctx.element);
        return next();
      };
    }
  });
};

var _templateObject = /*#__PURE__*/ _taggedTemplateLiteralLoose(["<script type=\"application/json\" id=\"__REDUX_STATE__\">", "</script>"], ["<script type=\"application/json\" id=\"__REDUX_STATE__\">", "</script>"]);

function _taggedTemplateLiteralLoose(strings, raw) { if (!raw) { raw = strings.slice(0); } strings.raw = raw; return strings; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var index = getPlugin();

export default index;
export { ReduxToken, ReducerToken, PreloadedStateToken, EnhancerToken, GetInitialStateToken };
//# sourceMappingURL=browser.es5.es.js.map
