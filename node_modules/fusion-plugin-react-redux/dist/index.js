'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var redux = require('redux');
var fusionCore = require('fusion-core');
var React = _interopDefault(require('react'));
var reactRedux = require('react-redux');

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */
var ctxEnhancer = (ctx => createStore => (...args) => {
  const store = _objectSpread({}, createStore(...args), {
    ctx: ctx
  });

  return store;
});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const ReduxToken = fusionCore.createToken('ReduxToken');
const ReducerToken = fusionCore.createToken('ReducerToken');
const PreloadedStateToken = fusionCore.createToken('PreloadedStateToken');
const EnhancerToken = fusionCore.createToken('EnhancerToken');
const GetInitialStateToken = fusionCore.createToken('GetInitialStateToken');

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */

/* eslint-env browser */

/* globals __REDUX_DEVTOOLS_EXTENSION__ */

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
const plugin = true && fusionCore.createPlugin({
  deps: {
    reducer: ReducerToken,
    preloadedState: PreloadedStateToken.optional,
    enhancer: EnhancerToken.optional,
    getInitialState: GetInitialStateToken.optional
  },

  provides({
    reducer,
    preloadedState,
    enhancer,
    getInitialState
  }) {
    class Redux {
      constructor(ctx) {
        // We only use initialState for client-side hydration
        // The real initial state should be derived from the reducer and the @@INIT action
        this.ctx = ctx;
        this.store = null;
      }

      async initStore() {
        if (this.store) {
          return this.store;
        }

        if (getInitialState) {
          preloadedState = Object.assign({}, preloadedState, (await getInitialState(this.ctx)));
        }

        const enhancers = [enhancer, ctxEnhancer(this.ctx)].filter(Boolean); // $FlowFixMe

        this.store = redux.createStore(reducer, preloadedState, // $FlowFixMe
        redux.compose(...enhancers));
        return this.store;
      }

    }

    return {
      from: fusionCore.memoize(ctx => new Redux(ctx))
    };
  },

  middleware(_, redux$$1) {
    return async (ctx, next) => {
      if (!ctx.element) return next();
      const store = await redux$$1.from(ctx).initStore();
      ctx.element = React.createElement(reactRedux.Provider, {
        store: store
      }, ctx.element);
      await next();
      const serialized = JSON.stringify(store.getState());
      const script = fusionCore.html`<script type="application/json" id="__REDUX_STATE__">${serialized}</script>`;
      ctx.template.body.push(script);
    };
  }

});

/** Copyright (c) 2018 Uber Technologies, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 */
var index = plugin;

exports.default = index;
exports.ReduxToken = ReduxToken;
exports.ReducerToken = ReducerToken;
exports.PreloadedStateToken = PreloadedStateToken;
exports.EnhancerToken = EnhancerToken;
exports.GetInitialStateToken = GetInitialStateToken;
//# sourceMappingURL=index.js.map
